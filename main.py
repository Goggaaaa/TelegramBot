from aiogram import Dispatcher, Bot, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import os


import Database.database as db
from Training import training
from IMB import feeding
import profile
import nutrition

  
from states import Training, NutritionStates
import markups as mks
import config


bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è –ë–î
async def on_startup(_):
    await db.init_db()


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "/start"
@dp.message_handler(commands=['start'], state='*')
async def command_start(message: types.Message):

    '''
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è '/start' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass
    '''

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    username = message.from_user.username

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î)
    await db.create_profile(user_id, username)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await Training.default.set()

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcomeText = (f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n'
                   f'üèãÔ∏è –Ø –∫–∞—Ä–º–∞–Ω–Ω—ã–π <i>—Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä</i>. '
                   f'–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:\n'
                   f'üí™ –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –Ω–∞–∫–∞—á–∞—Ç—å –∂–æ–ø–∫—É\n')
    await bot.send_message(message.from_user.id, welcomeText, parse_mode="HTML", reply_markup=mks.main_menu)


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º "/admin"
@dp.message_handler(commands=['admin'], state='*')
async def admin(message: types.Message):

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await db.check_admin(bot, dp, message.from_user.username, message.from_user.id)


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç callback "main_menu",
# –¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'main_menu', state='*')
async def main_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.delete()

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Training.default.set()

    await callback_query.message.answer(f'üèãÔ∏è –Ø –∫–∞—Ä–º–∞–Ω–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä.\n'
                                        f'üëá –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=mks.main_menu)


@dp.callback_query_handler(lambda c: c.data == 'trainings', state='*')
async def trainings_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    path = os.getcwd()
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    await training.init_trainings(dp, path)
    await callback_query.message.answer("üí™ –†–∞–∑–¥–µ–ª —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\n"
                                        "üëÄ –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏.\nÔ∏èÔ∏è"
                                        "‚úçÔ∏è –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã, —è –ø–æ–º–æ–≥—É –µ—ë —Å–æ—Å—Ç–∞–≤–∏—Ç—å!",
                                        reply_markup=mks.trainings_menu)


@dp.callback_query_handler(lambda c: c.data == 'feeding', state='*')
async def feeding_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = 'imt.jpg'  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(callback_query.from_user.id, photo, caption="üçî –†–∞—Å—á—ë—Ç –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢) –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å, –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ª–∏ –≤–µ—Å —É —á–µ–ª–æ–≤–µ–∫–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π, –∏–∑–±—ã—Ç–æ—á–Ω—ã–π –∏–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–∂–∏—Ä–µ–Ω–∏–µ.",
                             reply_markup=mks.feeding_menu)

    await feeding.get_height_weight(dp)


@dp.callback_query_handler(lambda c: c.data == 'profile', state='*')
async def profile_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    await profile.profile(dp, callback_query)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ü–∏—Ç–∞–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'nutrition', state='*')
async def nutrition_menu(callback_query: types.CallbackQuery):
    await callback_query.message.delete()
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª –ø–∏—Ç–∞–Ω–∏—è! –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:\n\n"
        "1Ô∏è‚É£ –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ –ü–∏—Ç–∞–Ω–∏–µ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ '1' –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏–ª–∏ '2' –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã."
    )
    await callback_query.message.answer(text)
    await NutritionStates.waiting_for_choice.set()


@dp.message_handler(state=NutritionStates.waiting_for_choice)
async def process_nutrition_choice(message: types.Message, state: FSMContext):
    choice = message.text.strip()
    if choice == '1':
        plan_text = nutrition.get_plan_text('weight_loss')
    elif choice == '2':
        plan_text = nutrition.get_plan_text('muscle_gain')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '1' –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è –∏–ª–∏ '2' –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã.")
        return

    await message.answer(plan_text, reply_markup=mks.to_menu_only)
    await state.finish()


# —Ä–∞–∑–¥–µ–ª –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data == 'oplata', state='*')
async def trainings_menu(callback_query: types.CallbackQuery):

    await callback_query.message.delete()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    path = os.getcwd()
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    await training.init_trainings(dp, path)
    await callback_query.message.answer("–±–∞–±–∫–∏ –±–∞–±–∫–∏.\n"
                                        "–∫—ç—à –Ω–∞–ª–∏—á–∫–∞.\nÔ∏èÔ∏è"
                                        "–∑–∞–Ω—á–∏–∫",
                                        reply_markup=mks.feeding_menu)


if __name__ == '__main__':
    executor.start_polling(dp,
                           skip_updates=True,
                           on_startup=on_startup)

