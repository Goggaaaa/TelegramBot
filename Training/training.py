from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from Database import database as db
from states import Training
import markups as mks
from time import sleep
import os

# Prefixes for callback data
CATEGORY_PREFIX = 'category:'
TRAINING_PREFIX = 'training:'

async def init_trainings(dp, path):

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –≤–∏–¥–µ –ø–∞–ø–æ–∫
    try:
        os.makedirs(f'{path}/Training/Trainings/–ù–∞–±–æ—Ä –≤–µ—Å–∞', exist_ok=True)
        os.makedirs(f'{path}/Training/Trainings/–ü–æ—Ö—É–¥–µ–Ω–∏–µ', exist_ok=True)
        os.makedirs(f'{path}/Training/Trainings/–£–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞', exist_ok=True)
    except Exception:
        pass


    # –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    async def start_training(training_info, callback_query, state):

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        await Training.active_training.set()

        try:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î
            with open(f'{path}/Training/Trainings/{training_info[0]}/{training_info[1]}/{training_info[2]}.txt', encoding="utf-8") as file:
                lines = file.readlines()

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await state.update_data(lines=lines, line_number=0)

            await callback_query.message.answer('–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?',
                                                reply_markup=mks.start_training_menu)
        except FileNotFoundError:
            await callback_query.message.answer('–í—ã –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!',
                                                reply_markup=mks.not_chosen_training)


    @dp.callback_query_handler(lambda c: c.data == 'next_exercise', state=Training.active_training)
    async def next_exercise(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.delete()

        data = await state.get_data()
        lines = data.get('lines', [])
        line_number = data.get('line_number', 0)

        try:
            line = lines[line_number].split(':')

            exercise_message = await callback_query.message.answer(
                f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: <b>{line[0]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: <b>{line[1]}</b>\n\n–í–∏–¥–µ–æ: <i>{line[2]}</i>',
                parse_mode='HTML',
                reply_markup=mks.active_training_menu)
        except IndexError:
            await callback_query.message.answer('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!', reply_markup=mks.to_menu_only)

            current_training_info = db.get_training(callback_query.from_user.id)
            trainings_list = os.listdir(f'{path}/Training/Trainings/{current_training_info[0]}/{current_training_info[1]}')
            day = int(current_training_info[2])

            if day < len(trainings_list):
                new_day = day + 1
            else:
                new_day = 1

            db.set_training(callback_query.from_user.id, current_training_info[0], current_training_info[1], new_day)
            db.update_trainings_count(callback_query.from_user.id)
            return

        try:
            await state.update_data(iteration=3, line=line, exercise_message=exercise_message)
        except Exception:
            pass


    @dp.callback_query_handler(lambda c: c.data == 'next_iteration', state=Training.active_training)
    async def continue_training(callback_query: CallbackQuery, state: FSMContext):

        data = await state.get_data()
        iteration = data.get('iteration', 3)
        line = data.get('line', [])
        exercise_message = data.get('exercise_message')

        try:
            iteration_message = data.get('iteration_message')
            if iteration_message:
                await iteration_message.delete()
        except Exception:
            pass

        if iteration % 2 and iteration < len(line):
            iteration_message = await callback_query.message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {line[iteration]}')
            await state.update_data(iteration_message=iteration_message)
        elif iteration % 2 == 0 and iteration < len(line):
            iteration_message = await callback_query.message.answer(f'‚è≥ –û—Ç–¥—ã—Ö - {line[iteration]} —Å–µ–∫.', reply_markup=mks.active_training_skip_timer_menu)
            await exercise_message.edit_reply_markup(None)

            for seconds in range(int(line[iteration]) - 1, 0, -1):
                if db.check_timer(callback_query.from_user.id) == 0:
                    sleep(1)
                    await iteration_message.edit_text(f'‚è≥ –û—Ç–¥—ã—Ö - {seconds} —Å–µ–∫.', reply_markup=mks.active_training_skip_timer_menu)
                else:
                    db.default_timer(callback_query.from_user.id)
                    break

            await iteration_message.edit_text(f'‚åõ –û—Ç–¥—ã—Ö –∑–∞–∫–æ–Ω—á–µ–Ω. –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–¥—Ö–æ–¥—É!')
            await exercise_message.edit_reply_markup(mks.active_training_menu)
            await state.update_data(iteration_message=iteration_message)
        else:
            await callback_query.message.answer('‚ùó –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ!\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!', reply_markup=mks.start_training_menu)
            line_number = data.get('line_number', 0) + 1
            await state.update_data(line_number=line_number)
            await exercise_message.delete()

        iteration += 1
        await state.update_data(iteration=iteration)


    @dp.callback_query_handler(lambda c: c.data == 'skip_timer', state='*')
    async def skip_timer(callback_query: CallbackQuery):
        await db.skip_timer(callback_query.from_user.id)


    @dp.callback_query_handler(lambda c: c.data == 'exit_training', state=Training.active_training)
    async def exit_training(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        data = await state.get_data()

        try:
           iteration_message = data.get('iteration_message', None)
           if iteration_message:
               await iteration_message.delete()
        except Exception:
            pass

        await callback_query.message.answer('–ü—Ä–æ–≥—Ä–µ—Å—Å —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è!', reply_markup=mks.training_warning_menu)


    @dp.callback_query_handler(lambda c: c.data == 'continue_training', state='*')
    async def continue_training_handler(callback_query: CallbackQuery, state: FSMContext):
        training_info = db.get_training(callback_query.from_user.id)
        await callback_query.message.delete()
        await start_training(training_info, callback_query, state)


    # Handler for 'new_training' button to show categories
    @dp.callback_query_handler(lambda c: c.data == 'new_training', state='*')
    async def new_training_handler(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        categories_of_trainings_list = os.listdir(f'{path}/Training/Trainings')
        categories_of_trainings_menu = InlineKeyboardMarkup(row_width=1)
        for category in categories_of_trainings_list:
            category_btn = InlineKeyboardButton(text=category, callback_data=f'{CATEGORY_PREFIX}{category}')
            categories_of_trainings_menu.add(category_btn)
        categories_of_trainings_menu.add(mks.trainings)
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', reply_markup=categories_of_trainings_menu)


    # Handler for selecting category using callback_data with prefix
    @dp.callback_query_handler(lambda c: c.data and c.data.startswith(CATEGORY_PREFIX), state='*')
    async def category_selected_handler(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        category = callback_query.data[len(CATEGORY_PREFIX):]
        # Save selected category in state context
        await state.update_data(selected_category=category)

        trainings_list = os.listdir(f'{path}/Training/Trainings/{category}')
        trainings_list_menu = InlineKeyboardMarkup(row_width=1)
        for training in trainings_list:
            training_btn = InlineKeyboardButton(text=training, callback_data=f'{TRAINING_PREFIX}{training}')
            trainings_list_menu.add(training_btn)
        trainings_list_menu.add(mks.trainings)
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É', reply_markup=trainings_list_menu)


    # Handler for selecting training using callback_data with prefix
    @dp.callback_query_handler(lambda c: c.data and c.data.startswith(TRAINING_PREFIX), state='*')
    async def training_selected_handler(callback_query: CallbackQuery, state: FSMContext):
        await callback_query.message.delete()
        training = callback_query.data[len(TRAINING_PREFIX):]
        data = await state.get_data()
        category = data.get('selected_category', None)

        if not category:
            # Category not selected or lost state - ask to reselect
            await callback_query.message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.', reply_markup=mks.trainings)
            return

        # Prepare training info message with exercises summary
        days_list = os.listdir(f'{path}/Training/Trainings/{category}/{training}')
        training_info = ''
        for day in sorted(days_list, key=lambda x: int(x.split('.')[0])):
            training_info += f'\n\n<b>–î–µ–Ω—å —Ü–∏–∫–ª–∞ <u>‚Ññ{day.split(".")[0]}</u></b>\n\n'
            with open(f'{path}/Training/Trainings/{category}/{training}/{day}', encoding="utf-8") as day_of_training:
                exercises = day_of_training.readlines()
                for exercise in exercises:
                    exercise_info = exercise.split(":")
                    training_info += f'<b>{exercise_info[0]}</b>, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ - {exercise_info[1]}\n'

        # Store selected training and category in state for confirmation
        await state.update_data(selected_training=training, selected_category=category)

        reply_markup = InlineKeyboardMarkup(row_width=2)
        apply_btn = InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data='apply_training')
        deny_btn = InlineKeyboardButton('‚Ü©  –ù–∞–∑–∞–¥', callback_data='new_training')
        reply_markup.insert(apply_btn)
        reply_markup.insert(deny_btn)

        await callback_query.message.answer(f'<b>{training}</b>{training_info}', parse_mode='HTML', reply_markup=reply_markup)


    # Handler for applying the selected training
    @dp.callback_query_handler(lambda c: c.data == 'apply_training', state='*')
    async def apply_training_handler(callback_query: CallbackQuery, state: FSMContext):
        data = await state.get_data()
        category = data.get('selected_category')
        training = data.get('selected_training')

        if not category or not training:
            await callback_query.message.answer('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', reply_markup=mks.trainings)
            return

        # Save choice in DB, day starts with 1
        db.set_training(callback_query.from_user.id, category, training, '1')

        await callback_query.message.delete()
        await callback_query.message.answer(f'‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - <b>{training}</b>\n', parse_mode='HTML', reply_markup=mks.after_creating_training_menu)


